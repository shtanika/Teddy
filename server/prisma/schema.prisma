
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")

  logs           DailyLog[]
  journalEntries JournalEntry[]
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model DailyLog {
  id         String     @id @map("_id")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  date       DateTime   @unique
  mood       String
  steps      Int
  sleep      SleepLog?
  exercises  ExerciseLog[]
  
  createdAt  DateTime   @default(now())
}

model SleepLog {
  id         String     @id @map("_id")
  dailyLog   DailyLog   @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId String     @unique

  duration   Float      // In hours
  quality    String?     // e.g., "poor", "fair", "good", "excellent"
}

model ExerciseLog {
  id             String        @id @map("_id")
  dailyLog       DailyLog      @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId     String        @unique

  type           ExerciseType? // Predefined type (optional)
  customType     String?       // User-defined label (e.g., "Dancing", "Martial Arts")
  duration       Int           // In minutes
  intensity      String?       // e.g., "low", "moderate", "high" (optional)
}

enum ExerciseType {
  walking
  running
  cycling
  swimming
  yoga
  strength
  other
}

model JournalEntry {
  id        String     @id @map("_id")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  date      DateTime   @default(now())
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt

  mood      String?
  tags      String[]
}